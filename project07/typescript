Script started on Thu 08 Nov 2018 11:57:42 AM EST
na29@maroon31:/home/cs/112/current/na29/project07$ ls
Debug		 ReversePoem.h		StackException.h  StackTester.h
poems		 ReversePoemTester.cpp	Stack.h		  tester.cpp
ReversePoem.cpp  ReversePoemTester.h	StackTester.cpp   typescript
na29@maroon31:/home/cs/112/current/na29/project07$ cat ReversePoem.h Stack  Except ion.h StackTester.h ReversePoemTester.cpp Stack.h tester.cpp ReversePoem.cpp Rev ersePoemTester.h StackTester.cpp
/*ReversePoem.h
 * Nana Osei Asiedu Yirenkyi (na29)
 *11/3/18
 *Project07
 */

#ifndef REVERSEPOEM_H_
#define REVERSEPOEM_H_

#include <string>
#include <iostream>
#include <fstream>
#include <cassert>
#include <ostream>
#include "Stack.h"

using namespace std;

class ReversePoem {
public:
	ReversePoem(const string &file);
	string getTitle() {return myTitle;}
	string getAuthor() {return myAuthor;}
	string getBody() {return myBody;}
	string getBodyReversed() {return myRevBody;}
private:
	string myTitle;
	string myAuthor;
	string myBody;
	string myRevBody;
};

#endif /* REVERSEPOEM_H_ */
/* StackException.h models exceptions in stack operations.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:
 * Date:
 */

#ifndef STACK_EXCEPTION
#define STACK_EXCEPTION

#include <iostream>
using namespace std;

 
class StackException {
public:
   StackException(const string& whereThrown,
                  const string& message) { 
       myLocation = whereThrown; 
       myMessage = message; 
   }

   string asString() const {
       return "*** StackException in " +
               myLocation + ": " + myMessage; 
   }

private:
   string myLocation;
   string myMessage;
};  // StackException


/* Function to allow a StackException (or a subclass) to be displayed
 * via an ostream.
 * Parameters: out, an ostream;
 *             se, a StackException.
 * Postcondition: the string representation of se has been inserted
 * into out
 *             && return-value == out.
 */
inline ostream& operator<<(ostream& out, const StackException& se) {
      out << se.asString();
      return out;
}

#endif

/* StackTester.h declares a test-class for a dynamically allocated (array) Stack.
 * Joel Adams, for CS 112 at Calvin College
 */

#ifndef STACKTESTER_H_
#define STACKTESTER_H_

#include "Stack.h"
#include <iostream>  // cout, cerr, ...
#include <cassert>   // assert()
#include <cstdlib>   // exit()
using namespace std;

class StackTester {
public:
	void runTests();
	void testConstructor();
	void testIsEmpty();
	void testPushPeekTopAndIsFull();
	void testPop();
	void testCopyConstructor();
	void testAssignment();
	void testDestructor();
	void testgetSizeandgetCapacity();
	void testsetCapacity();
};

#endif /*STACKTESTER_H_*/

/* ReversePoemTester.cpp : test ReversePoem class
 * Nana Osei Asiedu Yirenkyi (na29)
 *11/3/18
 *Project07
 */

#include "ReversePoemTester.h"

void ReversePoemTester::runTests() {
	cout << "\nTesting ReversePoem class..." << endl;
	testConstructor();
	testGetTitle();
	testGetAuthor();
	testGetBody();
	testGetBodyReversed();
	cout << "All tests passed!" << endl;
}

void ReversePoemTester::testConstructor() {
	cout << "- Testing constructors..." << flush;
	string poem = "poems/cats.txt";
	ReversePoem revpoem(poem);
	cout << "passed!" << endl;
}

void ReversePoemTester::testGetTitle() {
	cout << "- Testing getTitle()..." << flush;
	string poem = "poems/cats.txt";
	ReversePoem revpoem(poem);

	assert( revpoem.getTitle() == "Cats" );
	cout << " 1 " << flush;

	string poem2 = "poems/love.txt";
	ReversePoem revpoem2(poem2);

	assert(revpoem2.getTitle() == "Love?");
	cout << " 2 " << flush;
	cout << "passed!" << endl;
}

void ReversePoemTester::testGetAuthor() {
	cout << "- Testing getAuthor()..." << flush;
	string poem = "poems/cats.txt";
	ReversePoem revpoem(poem);

	assert(revpoem.getAuthor() == "Leo J. Smada");
	cout << " 1 " << flush;

	string poem2 = "poems/love.txt";
	ReversePoem revpoem2(poem2);

	assert(revpoem2.getAuthor() == "Anonymous");
	cout << " 2 " << flush;
	cout << "passed!" << endl;
}
void ReversePoemTester::testGetBody() {
	cout << "- Testing testGetBody()..." << flush;
	string poem = "poems/cats.txt";
	ReversePoem revpoem(poem);

	string line1 = "I love it when cats rub against me.";
	string line2 = "I could never say";
	string line3 = "I hate those furry felines.";

	string body = line1 + "\n" + line2 + "\n" + line3 + "\n";

	assert(revpoem.getBody() == body);

	cout << "passed!" << endl;
}
void ReversePoemTester::testGetBodyReversed() {
	cout << "- Testing testGetBodyReversed()..." << flush;

	string poem = "poems/cats.txt";
	ReversePoem revpoem(poem);

	string line1 = "I love it when cats rub against me.";
	string line2 = "I could never say";
	string line3 = "I hate those furry felines.";

	string body = line3 + '\n' + line2 + '\n' + line1 + '\n';
	assert(revpoem.getBodyReversed() == body);
	cout << "passed!" << endl;
}
/* Stack.h provides a (dynamic-array-based) Stack class.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name: Nana Osei Asiedu Yirenkyi
 * project07
 * Date: 11/3/2018
 * 
 * Invariant: mySize == 0 && isEmpty() && !isFull()
 *         || mySize == myCapacity && !isEmpty() && isFull()
 *         || mySize > 0 && mySize < myCapacity && !isEmpty() && !isFull().
 * Notes: 
 * 1. Member mySize always contains the index of the next empty space in myArray
 *        (the index of the array element into which the next pushed item will be placed).
 * 2. Sending push() to a full Stack throws the exception Stack::Overflow.
 * 3. Sending pop() or peekTop() to an empty Stack throws the exception Stack::Underflow.
 */

#ifndef STACK_H_
#define STACK_H_

#include "StackException.h"
#include <string>
#include <iostream>
using namespace std;

typedef int Item;
template <class Item>

class Stack {
public:
	Stack(unsigned capacity);
	Stack(const Stack& original);
	~Stack();
	Stack& operator=(const Stack& original);
	bool isEmpty();
	bool isFull();
	Item peekTop() const;
	void push(const Item& it);
	Item pop();
	int getSize() const {return mySize;}
	int getCapacity() const {return myCapacity;}
	void setCapacity(int newCapacity);
	
protected:
	void makeCopyOf(const Stack& original);
	
private:
	unsigned myCapacity;
	unsigned mySize;
	Item*    myArray;
	friend class StackTester;
};

/* explicit-value constructor
 * Parameter: capacity, an unsigned value.
 * Precondition: capacity > 0.
 * Postcondition: mySize == 0 && myCapacity == capacity
 *              && myArray contains the address of a dynamic array of 'capacity' entries.
 */
template <class Item>
Stack<Item>::Stack(unsigned capacity) {
	if (capacity <= 0) {
		throw StackException("Stack(capacity)", "capacity must be positive!");
	}
	mySize = 0;
    myCapacity = capacity;
    myArray = new Item[capacity];
}

/* copy constructor
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original.
 */
template <class Item>
Stack<Item>::Stack(const Stack& original) {
	makeCopyOf(original);
}

/* utility method containing code refactored from
 *  the copy constructor and operator=.
 * Parameter: original, a Stack (const reference).
 * Precondition: original.myCapacity > 0.
 * Postcondition: I am a copy of original.
 */
template <class Item>
void Stack<Item>::makeCopyOf(const Stack& original) {
	myCapacity = original.myCapacity;
	myArray = new Item[myCapacity];

	for (unsigned i = 0; i < myCapacity; i++) {
		myArray[i] = original.myArray[i];
	}
	mySize = original.mySize;
}

/* destructor
 * Postcondition: myCapacity == 0 && mySize == 0
 *             && myArray has been deallocated.
 */
template <class Item>
Stack<Item>::~Stack() {
	delete [] myArray;
	myArray = NULL;
	myCapacity = 0;
	mySize = 0;
}

/* assignment operator
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original
 *              && I have been returned.
 */
template <class Item>
Stack<Item>& Stack<Item>::operator=(const Stack& original) {
	if (this != &original) {
		delete [] myArray;
		makeCopyOf(original);
	}
	return *this;
}

/* Is Empty method that returns true if the stack is empty
 * Precondition: I am a empty
 */
template <class Item>
bool Stack<Item>::isEmpty() {
	if (mySize > 0) {return false;}
	return true;
}

/* Is Full method that returns true if the stack is full
 * Precondition: I am a full
 */
template <class Item>
bool Stack<Item>::isFull() {
	if (mySize == myCapacity) {return true;}
	return false;
}

/*PeekTop method
 * Postcondition: value of the top most item of stack
 */
template <class Item>
Item Stack<Item>::peekTop() const {
	if ( mySize <= 0 ) {
		throw StackException("peekTop()", "stack is empty");
	}
	return myArray[mySize-1];
   }


/*Push method
 *Parameter: an Item
 *PostCondition: a stack with a new item if there is space
 */
template <class Item>
void Stack<Item>::push(const Item& it) {
	if ( isFull() ) {
		throw StackException("push()", "stack is full");
	}
	myArray[mySize] = it;
	mySize++;
   }

/*Pop method
 * PostCondition: removes and returns the top item from the Stack.
 */
template <class Item>
Item Stack<Item>::pop() {
	if ( isEmpty() ) {
		throw StackException("pop()", "stack is empty");
	}
	mySize--; return myArray[mySize];
   }


/*Set Cpacity method
 *Parameter: a newCapacity
 *PostCondition: a stack with a new capacity
 */
template <class Item>
void Stack<Item>::setCapacity(int newCapacity) {
	if (newCapacity < mySize) {
		throw StackException("setCapacity", "new capacity cannot be less than old capacity.");
	}
	Item* newArray = new Item[newCapacity];
	for (unsigned i = 0; i < mySize; i++) {
		newArray[i] = myArray[i];
	}
	delete[] myArray;
	myCapacity = newCapacity;
	myArray = newArray;

}
#endif
/* tester.cpp is a "driver" to run the tests in the StackTester class.
 * Joel Adams, for CS 112 at Calvin College.
 */
 
#include "StackTester.h"
#include "ReversePoem.h"
#include "ReversePoemTester.h"
#include <iostream>
using namespace std;

int main() {
	StackTester st;
	ReversePoemTester rev;
	st.runTests();
	rev.runTests();


	cout << "\nEnter the name of the poem file: ";
	string poemFile;
    cin >> poemFile;

    ReversePoem reversePoem(poemFile);
    cout << reversePoem.getTitle() << "\n"
    		<< reversePoem.getAuthor() << "\n"
			<< "\n*** Top-To-Bottom ***\n\n"
	        << reversePoem.getBody()
	        << "\n\n*** Bottom-To-Top ***\n\n"
	        << reversePoem.getBodyReversed()
	        << endl;
}

/* ReversePoem.cpp
 * Nana Osei Asiedu Yirenkyi (na29)
 *11/3/18
 *Project07
 */

#include "ReversePoem.h"

ReversePoem::ReversePoem(const string &file) {
	ifstream poem(file.c_str());
	assert( poem.is_open() );
	getline(poem, myTitle);
	getline(poem, myAuthor);
	Stack<string> myStack(1);
	string line;
	getline(poem, line);
	while (!poem.eof()) {
		getline(poem, line);
		if (line != "") {
			try {
				myStack.push(line);
			} catch (StackException& se) {
				myStack.setCapacity(myStack.getCapacity() * 2);
				myStack.push(line);
			}
			myBody += line += "\n";
		}
	}
	while (!myStack.isEmpty()) {
		myRevBody += myStack.pop() += "\n";
	}
}
/* ReversePoemTester.h : declares methods for testing ReversePoem class
 * Nana Osei Asiedu Yirenkyi (na29)
 *11/3/18
 *Project07
 */

#ifndef REVERSEPOEMTESTER_H_
#define REVERSEPOEMTESTER_H_

#include "ReversePoem.h"
#include <iostream>  // cout, cerr, ...
#include <cassert> // assert()
#include <cstdlib>   // exit()
using namespace std;

class ReversePoemTester {
public:
	void runTests();
	void testConstructor();
	void testGetTitle();
	void testGetAuthor();
	void testGetBody();
	void testGetBodyReversed();

};

#endif /* REVERSEPOEMTESTER_H_ */
/* StackTester.cpp defines test-methods for the 
 *  dynamically allocated (array) Stack operations
 * Joel Adams, for CS 112 at Calvin College
 */

#include "StackTester.h"


void StackTester::runTests() {
	cout << "Testing Stack class..." << endl;
	testConstructor();
	testIsEmpty();
	testPushPeekTopAndIsFull();
	testPop();
	testCopyConstructor();
	testAssignment();
	testDestructor();
	testgetSizeandgetCapacity();
	testsetCapacity();
	cout << "All tests passed!" << endl;
}

void StackTester::testConstructor() {
	cout << "- Testing constructor... " << flush;
	// invalid parameter
	try {
		Stack<int> s1(0);
		cerr << "\nConstructed stack of size 0\n";
		exit(1);
	} catch (const StackException& se) {
		cout << se << flush;
		cout << " 0 " << flush;
	}
	// valid parameter
	Stack<int> s2(3);
	cout << " 1 " << flush;
	cout << " Passed!" << endl;
}

void StackTester::testIsEmpty() {
	cout << "- Testing isEmpty()... " << flush;
	// capacity 1
	Stack<int> s1(1);
	assert( s1.isEmpty() );
	cout << " 1 " << flush;
	// capacity > 1
	Stack<int> s2(3);
	assert( s2.isEmpty() );
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}


void StackTester::testPushPeekTopAndIsFull() {
	cout << "- Testing push()... " << flush;
	// test with capacity 1
	Stack<int> s1(1);
	s1.push(11);
	assert( s1.peekTop() == 11 );
	assert( !s1.isEmpty() );
	assert( s1.isFull() );
	try {
		s1.push(22);
		cerr << "\npush() worked on a full stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 1 " << flush;
	}
	// test with capacity > 1
	Stack<int> s2(3);
	s2.push(11);
	assert( s2.peekTop() == 11 );
	s2.push(22);
	assert( s2.peekTop() == 22 );
	s2.push(33);
	assert( s2.peekTop() == 33 );
	try {
		s2.push(44);
		cerr << "\npush() worked on a full stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 2 " << flush;
	}
	cout << " Passed! " << endl;
}

void StackTester::testPop() {
	cout << "- Testing pop()... " << flush;
	// try empty, capacity 1
	Stack<int> s1(1);
	assert( s1.isEmpty() );
    try {
            s1.peekTop();
            cerr << "\npeekTop() worked on empty stack (size 1)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 0a " << flush;
    }
	try {
		s1.pop();
		cerr << "\npop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 0b " << flush;
	}

	// try empty, capacity > 1
	Stack<int> s2(3);
	try {
		s2.pop();
		cerr << "\npop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 1a " << flush;
	}
    try {
            s2.peekTop();
            cerr << "\npeekTop() worked on empty stack (size 3)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 1b " << flush;
    }

	// try non-empty, capacity 1
    Stack<int> s3(1);
	s3.push(11);
	assert( s3.peekTop() == 11 );
	assert( s3.pop() == 11 );
	cout << " 2 " << flush;
	try {
		s3.pop();
		cerr << "\ns3.pop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 2a " << flush;
	}
    try {
            s3.peekTop();
            cerr << "\ns3.peekTop() worked on empty stack (size 1)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 2b " << flush;
    }

	// try non-empty, capacity > 1
    Stack<int> s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	assert( s4.peekTop() == 33 );
	assert( s4.pop() == 33 );
	assert( s4.peekTop() == 22 );
	assert( s4.pop() == 22 );
	assert( s4.peekTop() == 11 );
	assert( s4.pop() == 11 );
	cout << " 3 " << flush;
	try {
		s4.pop();
		cerr << "\ns4.pop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 3a " << flush;
	}
    try {
            s4.peekTop();
            cerr << "\ns4.peekTop() worked on empty stack (size 3)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 3b " << flush;
    }

	cout << " Passed!" << endl;
}

void StackTester::testCopyConstructor() {
	cout << "- Testing copy constructor... " << flush;
	// minimal empty Stack
	Stack<int> s1(1);
	Stack<int> s2(s1);
	assert( s2.isEmpty() );
	assert( s2.myArray != NULL );
	assert( s2.myCapacity == 1 );
	assert( s2.myArray != s1.myArray );
	cout << " 1 " << flush;
	// minimal non-empty Stack
	Stack<int> s3(1);
	s3.push(11);
	Stack<int> s4(s3);
	assert( !s4.isEmpty() );
	assert( s4.isFull() );
	assert( s4.peekTop() == 11 );
	assert( s4.myArray != s3.myArray );
	cout << " 2 " << flush;
	// non-minimal, non-empty stack
	Stack<int> s5(3);
	s5.push(11);
	s5.push(22);
	s5.push(33);
	Stack<int> s6(s5);
	assert( s6.myCapacity == s5.myCapacity );
	assert( s6.mySize == s5.mySize );
	assert( s6.myArray != s5.myArray );
	assert( s6.pop() == 33 );
	assert( s6.pop() == 22 );
	assert( s6.pop() == 11 );
	assert( s5.peekTop() == 33 );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}

void StackTester::testAssignment() {
	cout << "- Testing assignment... " << flush;
	// minimal empty Stacks, same size
	Stack<int> s1(1);
	Stack<int> s2(1);
	s2 = s1;
	assert( s2.isEmpty() );
	assert( s2.myArray != NULL );
	assert( s2.myArray != s1.myArray );
	assert( s2.myCapacity == 1 );
	cout << " 1 " << flush;
	// minimal non-empty Stack to empty Stack, same capacity
	Stack<int> s3(1);
	s3.push(11);
	Stack<int> s4(1);
	s4 = s3;
	assert( !s4.isEmpty() );
	assert( s4.isFull() );
	assert( s4.peekTop() == 11 );
	assert( s4.myArray != s3.myArray );
	cout << " 2 " << flush;
	// minimal empty stack to non-empty stack, same capacity
	Stack<int> s5(1);
	Stack<int> s6(1);
	s6.push(11);
	s6 = s5;
	assert( s6.isEmpty() );
	assert( s6.myArray != NULL );
	assert( s6.myArray != s5.myArray );
	assert( s6.myCapacity == 1 );
	cout << " 3 " << flush;
	// non-minimal non-empty stack to empty stack, different capacities
	Stack<int> s7(3);
	s7.push(11);
	s7.push(22);
	s7.push(33);
	Stack<int> s8(2);
	s8 = s7;
	assert( s8.myArray != s7.myArray );
	assert( s8.myCapacity == s7.myCapacity );
	assert( s8.mySize == s7.mySize );
	assert( s8.pop() == 33 );
	assert( s8.pop() == 22 );
	assert( s8.pop() == 11 );
	assert( s7.peekTop() == 33 );
	cout << " 4 " << flush;
	// non-minimal, empty stack to non-empty stack, different capacities
	Stack<int> s9(2);
	Stack<int> s10(3);
	s10.push(11);
	s10.push(22);
	s10.push(33);
	s10 = s9;
	assert( s10.isEmpty() );
	assert( s10.myArray != s9.myArray );
	assert( s10.myCapacity == s10.myCapacity );
	cout << " 5 " << flush;
	// self-assignment, minimal size
	Stack<int> s11(1);
	s11.push(11);
	s11 = s11;
	assert( s11.isFull() );
	assert( !s11.isEmpty() );
	cout << " 6 " << flush;
	// chaining
	Stack<int> s12(2);
	s12.push(11);
	s12.push(22);
	Stack<int> s13(1);
	Stack<int> s14(1);
	s14 = s13 = s12;
	assert( s14.isFull() );
	assert( s14.myArray != s13.myArray );
	assert( s14.myArray != s12.myArray );
	assert( s14.pop() == 22 );
	assert( s14.pop() == 11 );
	assert( s14.isEmpty() );
	cout << " 7 " << flush;
      // self-assignment, non-minimal size
      s13 = s13;
	assert( !s13.isEmpty() );
	assert( s13.isFull() );
	assert( s13.pop() == 22 );
	assert( s13.pop() == 11 );
	assert( s13.isEmpty() );
	cout << " 8 " << flush;
	cout << "Passed!" << endl;
}

void StackTester::testDestructor() {
	cout << "- Testing destructor..." << flush;
	// minimal, empty
	Stack<int> s1(1);
	s1.~Stack();
	assert( s1.isEmpty() );
	assert( s1.myArray == NULL );
	assert( s1.myCapacity == 0 );
	cout << " 1 " << flush;
	// minimal, non-empty
	Stack<int> s2(1);
	s2.push(11);
	s2.~Stack();
	assert( s2.isEmpty() );
	assert( s2.myArray == NULL );
	assert( s2.myCapacity == 0 );
	cout << " 2 " << flush;
	// non-minimal, empty
	Stack<int> s3(3);
	s3.~Stack();
	assert( s3.isEmpty() );
	assert( s3.myArray == NULL );
	assert( s3.myCapacity == 0 );
	cout << " 3 " << flush;
	// non-minimal, non-empty
	Stack<int> s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	s4.~Stack();
	assert( s4.isEmpty() );
	assert( s4.myArray == NULL );
	assert( s4.myCapacity == 0 );
	cout << " 4 " << flush;
	cout << " Passed!" << endl;
}

void StackTester::testgetSizeandgetCapacity() {
	cout << "- Testing testgetSizeandgetCapacity...." << flush;
	//empty(size)
	Stack<int> s1(4);
	Stack<int> s2(2);
	assert( s1.isEmpty() );
	assert( s2.isEmpty() );
	assert( s1.getSize() == 0);
	assert( s2.getSize() == 0);
	cout << " 1a" << flush;

	//non-empty(size)
	s1.push(11);
	assert( s1.getSize() == 1);
	s1.push(22);
	assert( s1.getSize() == 2);
	s1.push(33);
	assert( s1.getSize() == 3);
	s1.push(44);
	assert( s1.getSize() == 4);
	cout << " 1b" << flush;

	//capacity
	assert( s1.isFull() );
	assert( !s1.isEmpty() );
	assert( s1.getCapacity() == 4);
	assert( !s2.isFull() );
	assert( s2.isEmpty() );
	assert( s2.getCapacity() == 2);
	cout << " 2" << flush;
	cout << " Passed!" << endl;
}

void StackTester::testsetCapacity() {
	cout << "- Testing testsetCapacity...." << flush;
	//new stack with 0 capacity
	Stack<int> s1(1);
	s1.push(11);
	try {
		s1.setCapacity(0);
		cerr << "\nsetCapacity() of 0 works \n";
		exit(1);
	} catch (StackException& se) {
		cout << " 0" << flush;
	}
	// new Stack with Capacity less than previous Capacity
	Stack<int> s2(3);
	s2.push(11);
	s2.push(22);
	s2.push(33);
	try {
		s1.setCapacity(0);
		cerr << "\nsetCapacity() with smaller capacity works \n";
		exit(1);
	} catch (StackException& se) {
			cout << " 1" << flush;
	}
	//normal case
	Stack<int> s3(2);
	s3.push(11);
	s3.push(22);
	s3.setCapacity(3);
	assert( s3.getCapacity() == 3);
	cout << " 2" << flush;
	cout << " Passed!" << endl;

}
na29@maroon31:/home/cs/112/current/na29/project07$ cd debug
bash: cd: debug: No such file or directory
na29@maroon31:/home/cs/112/current/na29/project07$ cd  cd debug[1@/debug
bash: cd: /debug: No such file or directory
na29@maroon31:/home/cs/112/current/na29/project07$ cd /debug[1P[1@D
bash: cd: /Debug: No such file or directory
na29@maroon31:/home/cs/112/current/na29/project07$ cd Debug
na29@maroon31:/home/cs/112/current/na29/project07/Debug$ m ls
makefile    ReversePoem.d	 ReversePoemTester.o  StackTester.o  tester.o
objects.mk  ReversePoem.o	 sources.mk	      subdir.mk
project07   ReversePoemTester.d  StackTester.d	      tester.d
na29@maroon31:/home/cs/112/current/na29/project07/Debug$ make all
make: Nothing to be done for 'all'.
na29@maroon31:/home/cs/112/current/na29/project07/Debug$ cd ..
na29@maroon31:/home/cs/112/current/na29/project07$ ./debug/project07
bash: ./debug/project07: No such file or directory
na29@maroon31:/home/cs/112/current/na29/project07$ ./debug/project07[1P[1@D
Testing Stack class...
- Testing constructor... *** StackException in Stack(capacity): capacity must be positive! 0  1  Passed!
- Testing isEmpty()...  1  2  Passed!
- Testing push()...  1  2  Passed! 
- Testing pop()...  0a  0b  1a  1b  2  2a  2b  3  3a  3b  Passed!
- Testing copy constructor...  1  2  3 Passed!
- Testing assignment...  1  2  3  4  5  6  7  8 Passed!
- Testing destructor... 1  2  3  4  Passed!
- Testing testgetSizeandgetCapacity.... 1a 1b 2 Passed!
- Testing testsetCapacity.... 0 1 2 Passed!
All tests passed!

Testing ReversePoem class...
- Testing constructors...passed!
- Testing getTitle()... 1  2 passed!
- Testing getAuthor()... 1  2 passed!
- Testing testGetBody()...passed!
- Testing testGetBodyReversed()...passed!
All tests passed!

Enter the name of the poem file: poems/love.txt
Love?
Anonymous

*** Top-To-Bottom ***

I don't love you anymore...
I would be lying if I said
That I still love you the way I always did.
I'm sure
Nothing was in vain.
And I feel inside of me that
You mean nothing to me
I could never really say that
Our time together matters.
I feel more and more that
I'm forgetting you...
And I will never use the phrase
I love you.
I'm sorry but I must tell the truth.


*** Bottom-To-Top ***

I'm sorry but I must tell the truth.
I love you.
And I will never use the phrase
I'm forgetting you...
I feel more and more that
Our time together matters.
I could never really say that
You mean nothing to me
And I feel inside of me that
Nothing was in vain.
I'm sure
That I still love you the way I always did.
I would be lying if I said
I don't love you anymore...

na29@maroon31:/home/cs/112/current/na29/project07$ ./Debug/project07
Testing Stack class...
- Testing constructor... *** StackException in Stack(capacity): capacity must be positive! 0  1  Passed!
- Testing isEmpty()...  1  2  Passed!
- Testing push()...  1  2  Passed! 
- Testing pop()...  0a  0b  1a  1b  2  2a  2b  3  3a  3b  Passed!
- Testing copy constructor...  1  2  3 Passed!
- Testing assignment...  1  2  3  4  5  6  7  8 Passed!
- Testing destructor... 1  2  3  4  Passed!
- Testing testgetSizeandgetCapacity.... 1a 1b 2 Passed!
- Testing testsetCapacity.... 0 1 2 Passed!
All tests passed!

Testing ReversePoem class...
- Testing constructors...passed!
- Testing getTitle()... 1  2 passed!
- Testing getAuthor()... 1  2 passed!
- Testing testGetBody()...passed!
- Testing testGetBodyReversed()...passed!
All tests passed!

Enter the name of the poem file: poems/anorexia
project07: ../ReversePoem.cpp:11: ReversePoem::ReversePoem(const string&): Assertion `poem.is_open()' failed.
Aborted
na29@maroon31:/home/cs/112/current/na29/project07$ ./Debug/project07
Testing Stack class...
- Testing constructor... *** StackException in Stack(capacity): capacity must be positive! 0  1  Passed!
- Testing isEmpty()...  1  2  Passed!
- Testing push()...  1  2  Passed! 
- Testing pop()...  0a  0b  1a  1b  2  2a  2b  3  3a  3b  Passed!
- Testing copy constructor...  1  2  3 Passed!
- Testing assignment...  1  2  3  4  5  6  7  8 Passed!
- Testing destructor... 1  2  3  4  Passed!
- Testing testgetSizeandgetCapacity.... 1a 1b 2 Passed!
- Testing testsetCapacity.... 0 1 2 Passed!
All tests passed!

Testing ReversePoem class...
- Testing constructors...passed!
- Testing getTitle()... 1  2 passed!
- Testing getAuthor()... 1  2 passed!
- Testing testGetBody()...passed!
- Testing testGetBodyReversed()...passed!
All tests passed!

Enter the name of the poem file: poems/anorexia.txt
Anorexia
Anonymous

*** Top-To-Bottom ***

I hate the girl in the mirror
so you'll never hear me say that
I'm good enough
I know in my heart that
the number on the scale defines my worth
and that
being thin will make me happy
I refuse to believe that there is hope
I'm ashamed of my body
No longer can I say
I am worth fighting for.


*** Bottom-To-Top ***

I am worth fighting for.
No longer can I say
I'm ashamed of my body
I refuse to believe that there is hope
being thin will make me happy
and that
the number on the scale defines my worth
I know in my heart that
I'm good enough
so you'll never hear me say that
I hate the girl in the mirror

na29@maroon31:/home/cs/112/current/na29/project07$ ./Debug/project07
Testing Stack class...
- Testing constructor... *** StackException in Stack(capacity): capacity must be positive! 0  1  Passed!
- Testing isEmpty()...  1  2  Passed!
- Testing push()...  1  2  Passed! 
- Testing pop()...  0a  0b  1a  1b  2  2a  2b  3  3a  3b  Passed!
- Testing copy constructor...  1  2  3 Passed!
- Testing assignment...  1  2  3  4  5  6  7  8 Passed!
- Testing destructor... 1  2  3  4  Passed!
- Testing testgetSizeandgetCapacity.... 1a 1b 2 Passed!
- Testing testsetCapacity.... 0 1 2 Passed!
All tests passed!

Testing ReversePoem class...
- Testing constructors...passed!
- Testing getTitle()... 1  2 passed!
- Testing getAuthor()... 1  2 passed!
- Testing testGetBody()...passed!
- Testing testGetBodyReversed()...passed!
All tests passed!

Enter the name of the poem file: poems/cats.txt
Cats
Leo J. Smada

*** Top-To-Bottom ***

I love it when cats rub against me.
I could never say
I hate those furry felines.


*** Bottom-To-Top ***

I hate those furry felines.
I could never say
I love it when cats rub against me.

na29@maroon31:/home/cs/112/current/na29/project07$ exit

Script done on Thu 08 Nov 2018 12:10:17 PM EST
