Script started on Mon 29 Oct 2018 12:27:34 PM EDT
na29@gold31:/home/cs/112/current/na29/project06$ ls
CongaLine.cpp  Debug   ListTester.cpp  main.cpp
CongaLine.h    List.h  ListTester.h    typescript
na29@gold31:/home/cs/112/current/na29/project06$ cat ListTester.cpp CongaLine.cp p main.cpp CongaLine.h List.h ListTester.h
/* ListTester.cpp defines the test methods for class List.
 * Student Name:Nana Osei Asiedu Yirenkyi(na29)
 * Date: Oct 21 2018
 * PROJECT06
 * Joel Adams, for CS 112 at Calvin College.
 *
 * testInequality(), testWriteToStream(), testReadFromString(),	testGetIndexOf() and testRemove() tests written by Nana Osei (na29)
 */


#include "ListTester.h" // ListTester
#include "List.h"       // List
#include <iostream>     // cin, cout
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // underflow_error
using namespace std;

void ListTester::runTests() {
	cout << "Running List tests..." << endl;
	testDefaultConstructor();
	testNodeDefaultConstructor();
	testNodeExplicitConstructor();
	testAppend();
	testDestructor();
	testCopyConstructor();
	testAssignment();
	testInequality(); //NANA OSEI (NA29)
	testWriteToStream(); //NANA OSEI (NA29)
	testReadFromString(); //NANA OSEI (NA29)
	testGetIndexOf(); //NANA OSEI (NA29)
	testRemove(); //NANA OSEI (NA29)
	testEquality();
	testReadFromStream();
	testWriteToFile();
	testPrepend();
	testInsert();
	testInsertAfter();
	testInsertBefore();
	testOutput();
	cout << "All tests passed!" << endl;
}

void ListTester::testDefaultConstructor() {
	cout << "Testing List default constructor... " << flush;
	List<double> aList;
	assert( aList.mySize == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << "Passed!" << endl;
}

void ListTester::testNodeDefaultConstructor() {
	cout << "Testing Node default constructor... " << flush;
	List<double>::Node aNode;
	assert( aNode.myItem == 0 );
	assert( aNode.myNext == NULL );
	cout << "Passed!" << endl;
}

void ListTester::testNodeExplicitConstructor() {
	cout << "Testing Node explicit constructor... " << flush;
	List<double>::Node n1(11, NULL);
	assert( n1.myItem == 11 );
	assert( n1.myNext == NULL );
	cout << " 1 " << flush;

	List<double>::Node *n3 = new List<double>::Node(33, NULL);
	List<double>::Node n2(22, n3);
	assert( n2.myItem == 22 );
	assert( n2.myNext == n3 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void ListTester::testAppend() {
	cout << "Testing append()... " << flush;
	// empty List
	List<double> aList;
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	try {
		aList.getFirst();
		cerr << "getFirst() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0a " << flush;
	}
	try {
		aList.getLast();
		cerr << "getLast() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0b " << flush;
	}
	// append to empty list
	aList.append(11);
	assert( aList.getSize() == 1 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast == aList.myFirst );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 11 );
	assert( aList.myFirst->myNext == NULL );
	cout << " 1 " << flush;
	// append to a list containing 1 Item
	aList.append(22);
	assert( aList.getSize() == 2 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.myFirst != aList.myLast );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 22 );
	assert( aList.myFirst->myNext != NULL );
	assert( aList.myLast->myNext == NULL );
	cout << " 2 " << flush;
	// append to a list containing 2 Items
	aList.append(33);
	assert( aList.getSize() == 3 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 33 );
	assert( aList.myFirst->myNext->myItem == 22 );
	assert( aList.myLast->myNext == NULL );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}

void ListTester::testDestructor() {
	cout << "Testing destructor... " << flush;
	List<double> aList;
	aList.~List();
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << " 1 " << flush;

	aList.append(11);
	aList.append(22);
	aList.append(33);
	aList.~List();
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << " 2 " << flush;
	cout << "Passed!  But double-check for memory leaks!" << endl;
}

void ListTester::testCopyConstructor() {
	cout << "Testing copy constructor... " << flush;
	// copy empty list
	List<double> list1;
	List<double> list2(list1);
	assert( list2.getSize() == 0 );
	assert( list2.myFirst == NULL );
	assert( list2.myLast == NULL );
	cout << " 1 " << flush;

	// copy nonempty list
	List<double> list3;
	list3.append(11);
	list3.append(22);
	list3.append(33);
	List<double> list4(list3);
	assert( list4.getSize() == 3 );
	assert( list4.getFirst() == 11 );
	assert( list4.getLast() == 33 );
	assert( list4.myFirst->myNext->myItem == 22 );
	assert( list4.myFirst != list3.myFirst );
	assert( list4.myLast != list3.myLast );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void ListTester::testAssignment() {
	cout << "Testing assignment... " << flush;
	// empty to empty assignment
	List<double> list1;
	List<double> list2;
	list2 = list1;
	assert( list2.getSize() == 0 );
	assert( list2.myFirst == NULL );
	assert( list2.myLast == NULL );
	cout << " 1 " << flush;

	// non-empty to empty assignment
	List<double> list3;
	list3.append(11);
	list3.append(22);
	list3.append(33);
	List<double> list4;
	list4 = list3;
	assert( list4.getSize() == 3 );
	assert( list4.getFirst() == 11 );
	assert( list4.getLast() == 33 );
	assert( list4.myFirst->myNext->myItem == 22 );
      // check that nodes are distinct
	assert( list4.myFirst != list3.myFirst );
	assert( list4.myFirst->myNext != list3.myFirst->myNext );
	assert( list4.myLast != list3.myLast );
	cout << " 2 " << flush;

	// equal-sized non-empty to non-empty assignment
	List<double> list5;
	list5.append(44);
	list5.append(55);
	list5.append(66);
	list5 = list3;
	assert( list5.getSize() == 3 );
	assert( list5.getFirst() == 11 );
	assert( list5.getLast() == 33 );
	assert( list5.myFirst->myNext->myItem == 22 );
      // check that nodes are distinct
	assert( list5.myFirst != list3.myFirst );
	assert( list5.myFirst->myNext != list3.myFirst->myNext );
	assert( list5.myLast != list3.myLast );
	cout << " 3 " << flush;

	// empty to non-empty assignment
	List<double> list6;
	list6.append(44);
	list6.append(55);
	list6.append(66);
	List<double> list7;
	list6 = list7;
	assert( list6.getSize() == 0 );
	assert( list6.myFirst == NULL );
	assert( list6.myLast == NULL );
	cout << " 4 " << flush;

	// unequal-sized non-empty to non-empty assignment
	List<double> list8;
	list8.append(44);
	list8.append(55);
	list8.append(66);
	list8.append(77);
	list8 = list3;
	assert( list8.getSize() == 3 );
	assert( list8.getFirst() == 11 );
	assert( list8.getLast() == 33 );
	assert( list8.myFirst->myNext->myItem == 22 );
      // check that nodes are distinct
	assert( list8.myFirst != list3.myFirst );
	assert( list8.myFirst->myNext != list3.myFirst->myNext );
	assert( list8.myLast != list3.myLast );
	cout << " 5 " << flush;

	// assignment chaining
	List<double> list9;
	list9.append(44);
	list9.append(55);
	list9.append(66);
	list9.append(77);
	List<double> list10;
	list10 = list9 = list8;
	assert( list10.getSize() == 3 );
	assert( list10.getFirst() == 11 );
	assert( list10.getLast() == 33 );
	assert( list10.myFirst->myNext->myItem == 22 );
	cout << " 6 " << flush;

	// self-assignment (stupid, but possible)
	List<double> list11;
	list11.append(11);
	list11.append(22);
	list11.append(33);
	list11 = list11;
	assert( list11.getSize() == 3 );
	assert( list11.getFirst() == 11 );
	assert( list11.getLast() == 33 );
	assert( list11.myFirst->myNext->myItem == 22 );
	cout << " 7 " << flush;

	cout << "Passed!  But double-check for memory leaks!" << endl;
}


//############################################################ PROJECT05 ############################################################

//############################################################ NANA OSEI (NA29) ######################################################

void ListTester::testInequality() {
	cout << "Testing Inequality... " << flush;
	// two empty lists
	List<double> list1;
	List<double> list2;
	assert( !(list1 != list1) );
	cout << " 1 " << flush;

	// a non-empty list
	List<double> list3;
	list3.append(33);		// [33]
	assert(list3 != list1);
	cout << " 2 " << flush;

	// equal, non-empty lists of the same size
	List<double> list4;
	list4.append(44);		// [33]
	assert( list4 != list3 );
	assert( list3 != list4 );
	cout << " 3 " << flush;

	// unequal, non-empty lists of the same size
	list3.append(55);		// [33,55]
	List<double> list5;
	list5.append(44);		// [44]
	list5.append(55);		// [44,55]
	assert (list5 != list3);
	assert (list3 != list5);
	cout << " 4 " << flush;

	// unequal non-empty lists of different sizes
	list4.append(44);		// [33,44]
	list4.append(55);		// [33,44,55]
	assert (list4 != list5);
	assert(list5 != list4);
	assert(list5 != list3);
	cout << " 5 " << flush;

	cout << "Passed!" << endl;
}



void ListTester::testWriteToStream() const {
	cout << "Testing writeTo(ostream)... " << flush;
	List<double> List1;
	assert( List1.getSize() == 0 );
	assert( List1.myFirst == NULL );
	assert( List1.myLast == NULL );
	// append to empty list
	List1.append(11);
	List1.append(22);
	List1.append(33);//[11,22,33]
	assert(List1.mySize == 3);
	cout << " 1 " << flush;

	// write to an ofstream instead of cout, to automate the test
	ofstream fout("ListStreamOut.txt");//writing to file "ListStreamOut.txt
	assert( fout.is_open() );//assert if open
	List1.writeTo(fout, '\t');//use WriteTo method
	fout.close();//close stream
	cout << "Passed! See 'ListStreamOut.txt' for values..." <<
			flush;

	List<double> List2;//create new empty list
	assert( List2.getSize() == 0 );//make sure new list is empty
	assert( List2.myFirst == NULL );
	assert( List2.myLast == NULL );
	//check to see if values passed into file is correct
	List2.readFrom("ListStreamOut.txt");
	cout << List2.getSize() << endl;

	assert(List2.getSize() == 3);//check
	assert(List2.getFirst() == 11);
	assert(List2.getLast() == 33);
	assert(List2.myFirst->myNext-> myItem == 22);//check for myItem in 2nd node
	cout << " 2 " << flush;
	cout << "Passed!" << endl;

}

void ListTester::testReadFromString() const {
	cout << "Testing readFrom()... " << flush;
	List<double> List3;
	List3.readFrom("ListStreamOut.txt");//call function
	cout << " 1 " << flush;
	List3.writeTo(cout, '\t');
	assert( List3.getSize() == 3 );
	assert( List3.myFirst != NULL );
	assert( List3.getFirst() == 11 );
	assert( List3.getLast() == 33 );
	assert( List3.myFirst->myNext->myItem == 22);//check for myItem in 2nd node
	cout << "Passed!" << endl;

}


void ListTester::testGetIndexOf() {
	cout << "Testing GetIndexOf()... " << flush;
	List<double> list1;
	list1.append(11);
	list1.append(22);
	list1.append(33);
	list1.append(33); //[11,22,33,33]


	int index = list1.getIndexOf(11);//call function
	assert(index == 0);//check to see if index is correct
	index = list1.getIndexOf(22);//call function
	assert(index == 1);
	index = list1.getIndexOf(33);//call function
	assert(index == 2);
	cout << " 1 " << flush;
	assert(index != 3);
	cout << " 2 " << flush;

	//if item not available
	List<double> list2;
	list2.append(11);
	list2.append(22);
	list2.append(33);
	assert(list2.getSize() == 3);
	int index2 = list2.getIndexOf(44);//call function
	assert(index2 == -1);
	cout << " 3 " << flush;
	cout << "Passed!" << endl;

}

void ListTester::testRemove(){
	cout << "Testing remove()... " << flush;
	List<double> list1;//empty list
	list1.append(11);
	list1.append(22);
	list1.append(33);
	int it = list1.remove(8);//index greater than list
	assert(it == 33);
	assert(list1.getSize()==2);
	cout << " 1 " << flush;

	List<double> list2;
	list2.append(44);
	list2.append(55);
	list2.append(66);
	list2.append(77);
	int it2 = list2.remove(0);
	assert(it2 == 44);

	assert(list2.getFirst()== 55);
	assert(list2.getLast()==77);
	cout << " 2 " << flush;

	List<double> list3;
	list3.append(11);
	list3.append(11);
	list3.append(22);
	list3.append(33);
	int it3 = list3.remove(3);
	assert(it3 == 33);
	cout << " 3 " << flush;

	List<double> list4;
	list4.append(11);
	list4.append(11);
	list4.append(22);
	list4.append(33);
	int it4 = list4.remove(1);
	assert(it4 == 11);
	assert(list4.getSize()==3);
	assert(list4.getFirst()==11);
	cout << " 4 " << flush;

	cout << "Passed!" << endl;
}
//########################################################################################################################

/* Written By: hans langford
 * Purpose: are they equal ?
 */
void ListTester::testEquality() {
	cout << "Testing equality... " << flush;
	List<double> lista;
	List<double> listb;

	//test same
	for (int i = 0; i < 3; i++) {
		lista.append(i);
		listb.append(i);
	}
	assert( lista.myFirst->myItem == 0 );
    assert( lista.myFirst->myNext->myItem == 1 );
	assert( lista.myLast->myItem == 2 );
	assert( listb.myFirst->myItem == 0 );
	assert( listb.myFirst->myNext->myItem == 1 );
	assert( listb.myLast->myItem == 2 );
	assert( lista == listb );
	cout << " 0 " << flush;

	//make b different and test that they are different
	listb.append(100);
	assert( listb.myLast->myItem != lista.myLast->myItem );
	assert( !(lista == listb) );
	cout << " 1 " << flush;
	cout << "Passed!" << endl;
}



/* Written By: hans langford
 * Purpose: i will make one list, append, create another list and fill with values from a stream, then check if ==
 */
void ListTester::testReadFromStream() {
	cout << "Testing readFromString... " << flush;
	List<double> lista,listb;
	for (int i = 0; i < 3; i++) {
		lista.append(i);
	}

	ifstream fin("readFromTest.txt");
	assert( fin.is_open() );
	listb.readFrom(fin);
	assert( lista == listb );
	fin.close();
	cout << " 0 " << flush;
	cout << "Passed!" << endl;
}


/* Written By: hans langford
 * Purpose: read from one file, write to another, then see if they are the same
 */
void ListTester::testWriteToFile() {
	cout << "Testing writeToFile... " << flush;
	List<double> a;
	List<double> b;
	ifstream fin("readFromTest.txt");
	a.readFrom(fin);
    a.writeTo("testOut.txt",'\n');
    fin.close();
    ifstream newfin("testOut.txt");
	b.readFrom(newfin);
	assert(a==b);
	 cout << " 0 " << flush;

cout << "Passed!" << endl;

}


/* Written By: hans langford
 * Purpose: test that the item is inserted before and the list is correct
 */
void ListTester::testPrepend() {
    cout << "Testing prepend... " << flush;
    // test a non-empty list
    List<double> list1;
    ifstream fin("readFromTest.txt");
    list1.readFrom(fin);
	list1.prepend(1);
	list1.prepend(0);
	//this is checking that the chain of node is in prepend order
    assert( list1.myFirst->myItem == 0 );
    assert( list1.myFirst->myNext->myItem == 1 );
    assert( list1.myFirst->myNext->myNext->myItem == 0 );
    assert( list1.myFirst->myNext->myNext->myNext->myItem == 1 );
    assert( list1.myLast->myItem == 2 );
    cout << " 0 " << flush;

    // test an empty list
    List<double> list0;
    list0.prepend(0);
    assert( list0.mySize == 1 );
    assert( list0.myFirst->myItem == 0 );
    cout << " 1 " << flush;

    cout << "Passed!" << endl;
}


/* Written By: hans langford
 * Purpose: test write to a file
 */
void ListTester::testInsert() {
	cout << "Testing insert... " << flush;

	List<double> list1;
	ifstream fin("readFromTest.txt");
	list1.readFrom(fin);
	// test inserting at 0
	list1.insert(5, 0);
	assert( list1.myFirst->myItem == 5 );
	assert( list1.myFirst->myNext->myItem == 0 );
	assert( list1.myFirst->myNext->myNext->myItem == 1 );
	assert( list1.myLast->myItem == 2 );
	cout << " 0 " << flush;
	// tryy at 1
	list1.insert(5, 1);
	assert( list1.myFirst->myItem == 5 );
	assert( list1.myFirst->myNext->myItem == 5 );
	assert( list1.myFirst->myNext->myNext->myItem == 0 );
	assert( list1.myFirst->myNext->myNext->myNext->myItem == 1 );
	assert( list1.myLast->myItem == 2 );
	cout << " 1 " << flush;

	cout << "Passed!" << endl;
}


void ListTester::testInsertBefore() {
	cout << "Testing insertBefore()..." << flush;

	// empty list
	List<string> list1;
	list1.insertBefore("Nana", "Osei");
	assert(list1.mySize == 0);
	assert(list1.insertBefore("Nana", "Osei") == false);
	cout << " 0 " << flush;

	// a non-empty list
	List<string> list2;
	list2.append("Bas");
	list2.insertBefore("Bas", "Cole");
	assert(list2.getIndexOf("Bas") == 1);
	cout << " 1 " << flush;

	// a larger non-empty list
	List<string> list3;
	list3.append("Roro");
	list3.append("Popo");
	list3.append("Nono");
	list3.append("Zozo");
	assert(list3.insertBefore("Nono", "yoyo"));
	cout << " 2a " << flush;
	assert(list3.mySize == 5);
	cout << " 2b " << flush;
	assert(list3.getIndexOf("Hoho") == -1);
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void ListTester::testInsertAfter() {
	cout << "Testing insertAfter()..." << flush;

	// empty list
	List<string> list1;
	list1.insertAfter("Nana", "Osei");
	assert(list1.mySize == 0);
	assert(list1.insertBefore("Nana", "Osei") == false);
	cout << " 0 " << flush;

	// a non-empty list
	List<string> list2;
	list2.append("Bas");
	list2.insertAfter("Bas", "Cole");
	assert(list2.getIndexOf("Cole") == 1);
	cout << " 1 " << flush;

	// a larger non-empty list
	List<string> list4;
	list4.append("R");
	list4.append("P");
	list4.append("C");
	list4.append("Z");
	assert(list4.insertAfter("C", "D"));
	assert(list4.mySize == 5);
	assert(list4.getIndexOf("D") == 3);
	cout << " 2 " << flush;

	cout << "Passed!" << endl;
}

void ListTester::testOutput() {
	cout << "Testing operator<<()..." << flush;

	List<double> list1;
	list1.append(10);
	list1.append(100);
	list1.append(1000);
	list1.append(10000);
	list1.append(100000);
	assert(list1.mySize == 5);
	cout << " 0 " << flush;
//	cout << list1 << flush;
	cout << " 1 " << flush;
	cout << "Passed!" << endl;
}
/* CongaLine.cpp defines the methods for class CongaLine.
 *
 * @author: Joel Adams, for CS 112 at Calvin College.
 *
 * Based on an exercise by Marc LeBlanc from Wheaton College (MS).
 */

#include "CongaLine.h"
#include "List.h"
#include <iostream>


/* The CongaLine constructor
 * @param: person1, a string
 * @param: person2, a string
 * Postcondition: myFirstPerson == person1
 *             && mySecondPerson == person2
 *             && person1 is the first Item in myLine
 *             && person2 is the second Item in myLine
 *             && MY_MENU has been initialized.
 */
CongaLine::CongaLine(const string& person1, const string& person2) {
	myLine.append(person1);
	myLine.append(person2);
	myFirstPerson = person1;
	mySecondPerson = person2;
	MY_MENU = string("Please enter:\n")
		+ " 1 to join the Conga line at the end\n"
		+ " 2 to join the Conga line after a particular person\n"
		+ " 3 to join the Conga line before a particular person\n"
		+ " 4 to quit\n"
		+ "--> ";
}

/* Method to run the CongaLine simulation,
 *  prompting the user via cout
 *  and reading the user's input via cin.
 */
void CongaLine::run() {
	unsigned menuChoice = 0;
	string yourName, otherPersonsName;
	cout << myFirstPerson << " and " << mySecondPerson
			<< " have started a Conga Line!" << endl;

	while (menuChoice != 4) {
//		cout << "\n " << myLine << "\n\n";
		cout << "\n"; myLine.writeTo(cout, '='); cout << "\n\n";
		cout << "Conga, Conga, Con-GA!  Conga, Conga, Con-GA!\n" << endl;
		cout << MY_MENU;
		cin >> menuChoice;
		if (menuChoice == 1 || menuChoice == 2 || menuChoice == 3) {
			cout << "\nWhat is your name? ";
			cin >> yourName;
		}

		switch( menuChoice ) {
		case 1:
			myLine.append(yourName);
			break;
		case 2:
			cout << "Who do you want to follow? ";
			cin >> otherPersonsName;
			if ( !myLine.insertAfter(otherPersonsName, yourName) ) {
				cout << "\n***" << otherPersonsName
					 << " is not dancing!\n" << endl;
			}
			break;
		case 3:
			cout << "Who do you want to precede? ";
			cin >> otherPersonsName;
			if ( !myLine.insertBefore(otherPersonsName, yourName) ) {
				cout << "\n***" << otherPersonsName
					 << " is not dancing!\n" << endl;
			}
			break;
		case 4:
			cout << "\nThe dance is done!\n";
			break;
		default:
			cout << "\n*** " << menuChoice
			     << " is not a valid choice!\n" << endl;
		}
	}
}

/* main.cpp is the driver for a Conga line simulation.
 *
 * @author: Joel Adams, for CS 112 at Calvin College.
 *
 * Based on an exercise by Marc LeBlanc from Wheaton College (MS).
 */

#include "CongaLine.h"

int main() {
	CongaLine dance("Ann", "Bob");
	dance.run();
}
/* CongaLine.h declares class CongaLine,
 *  a Conga line dance simulation.
 *
 * @author: Joel Adams, for CS 112 at Calvin College.
 *
 * Based on an exercise by Marc LeBlanc from Wheaton College (MS).
 */


#ifndef CONGALINE_H_
#define CONGALINE_H_

#include <string>
#include "List.h"
using namespace std;

class CongaLine {
public:
	CongaLine(const string& person1, const string& person2);
	void run();

private:
	List<string> myLine;

	string MY_MENU;
	string myFirstPerson;
	string mySecondPerson;
};

#endif /* CONGALINE_H_ */
/* List.h
 * Student Name:Nana Osei Asiedu Yirenkyi(na29)
 * Date: Oct 21 2018
 * PROJECT06
 */

#ifndef LIST_H_
#define LIST_H_

#include <iostream>
#include <fstream>
#include <stdexcept>
#include <cassert>

using namespace std;
template <class Item>

class List {
public:
	List();
	virtual ~List();
	void append(const Item& it);
	unsigned getSize() const;
	Item getFirst() const;
	Item getLast() const;
	List(const List<Item>& original);
	List<Item>& operator=(const List<Item>& original);
	bool operator!=(const List<Item>& original);
	void readFrom(const string& fileName);
	void writeTo(ostream& out, const char seperator) const;
	int getIndexOf(Item it) const;
	Item remove(int index);
	bool operator==(const List<Item>& original);
	void readFrom(istream& in);
	void writeTo(string  filename, const char divider);
	void prepend(const Item & item);
	void insert(const Item& it, unsigned index);
	bool insertAfter(const Item& otherPersonsName, const Item& yourName);
	bool insertBefore(const Item& otherPersonsName, const Item& yourName);
	void Output(ostream& out) const;




private:
	struct Node{
		Node();
		~Node();
		Node(Item it, Node* next);
		Item myItem;
		Node* myNext;

	};
	int mySize;
	Node* myFirst;
	Node* myLast;
	void makeCopyOf(const List<Item>& original);
	void deallocation();

	friend class ListTester;

};



//Default List Constructor
template <class Item>
List<Item>::List() {
	mySize = 0;
	myFirst = myLast = NULL;
}


//Explicit List Constructor
template <class Item>
List<Item>::Node::Node() {
	myItem = 0;
	myNext = NULL;
  }


//Default Node Constructor
template <class Item>
List<Item>::Node::Node(Item it, Node* next){
	myItem = it;
	myNext = next;
}


//Adds an item to the end of the list
template <class Item>
void List<Item>::append(const Item& it){
	Node* nodePtr = new Node(it, NULL);
	if (mySize == 0) {
		myFirst = nodePtr;
	}
	else { myLast -> myNext = nodePtr;

	}
	myLast = nodePtr;
	mySize ++;
}


//Acceses and returns the size of the list
template <class Item>
unsigned List<Item>::getSize() const {
	return mySize;
}


//Acceses and returns the first Item in the first node
template <class Item>
Item List<Item>::getFirst() const{
	if (mySize < 0 || myFirst == NULL) {
		throw underflow_error("Size of list is too small.");
	}
	return myFirst -> myItem;
}


//Acceses and returns the last Item in the last node
template <class Item>
Item List<Item>::getLast() const {
	if (mySize < 0 || myFirst == NULL) {
		throw underflow_error("Size of list is too small.");
	}
	return myLast -> myItem;
}

template<class Item>
void List<Item>::deallocation() {
	delete myFirst; // delete first node, invoking ~Node() (does nothing if myFirst == NULL)
	myFirst = myLast = NULL; // clear myFirst and myLast (optional)
	mySize = 0; // clear mySize (optional)
}

//List Destructor
template <class Item>
List<Item>::~List() {
	deallocation();
}


//Node Destructor
template <class Item>
List<Item>::Node::~Node() {
//	cout << "~Node() is deallocating the node containing item "
//			<< myItem << endl;
	delete myNext;       // delete the next node, invoking ~Node() in it
                           // (does nothing if myNext == NULL)
   }


//Copy Method that makes a copy of a List
template <class Item>
void List<Item>::makeCopyOf(const List<Item>& original) {
	Node* oPtr = original.myFirst; //  start at the first node
	while (oPtr != NULL) {
		//  while there are nodes to copy:
		append(oPtr->myItem); //   append the item in that node
		oPtr = oPtr->myNext; //   advance to next node
	}
}


//List copy constructor that makes use of copy method
template <class Item>
List<Item>::List(const List<Item>& original) {
	myFirst = myLast = NULL; //  set pointers
	mySize = 0; //   and size to 'empty' values
	makeCopyOf(original);
   }


// Assignment operator assigns the left hand side of  operand to the right hand side
template <class Item>
List<Item>& List<Item>::operator=(const List<Item>& original) {
	if (this != &original) {
		deallocation();
		makeCopyOf(original);
	}
	return *this;
   }


//Inequality operator checks that left and right operand are different
template <class Item>
bool List<Item>::operator!=(const List<Item>& original) {
	if (this == &original) {
		return false;
	}
	else if (this->mySize != original.mySize) {
		return true;
	}
	for (int i = 0; i < mySize; i++) {
		Node* oPtr = original.myFirst;
		if (this->myFirst != oPtr) {
			return true;
		}
	}
	return false;
}


//Readfrom method that reads from a file
template<class Item>
void List<Item>::readFrom(const string& fileName) {
	if (mySize != 0) {deallocation();}
	ifstream fin( fileName.c_str() );
	assert( fin.is_open() );
	while(!fin.eof() ) {
		if(fin.peek() == '\n') {
			break;
		}
		Item it;
		fin >> it;
		append(it);
	}
	fin.close();
}


//WriteTo method that writes to the ostream
template<class Item>
void List<Item>::writeTo(ostream& out, const char seperator) const {
	Node* oPtr = myFirst;
	for (int i = 0; i < mySize; i++) {
		if (oPtr->myNext == NULL) {
			cout << oPtr->myItem << seperator << '\n';
		}
		else {
			cout << oPtr->myItem << seperator;
			oPtr = oPtr->myNext;
		}
	}
}



//Gets index of item in list
template<class Item>
int List<Item>::getIndexOf(Item it) const {
	Node* oPtr = myFirst;
	for (unsigned i = 0; i < mySize; i++) {
		if (it == oPtr->myItem){
			return i;
		}
		else if (it != oPtr-> myItem) {
			oPtr = oPtr->myNext;
		}
	}
	return -1;
}




template<class Item>
Item List<Item>::remove(int index){
	Item temp;
	if (mySize == 0){
		return 0;
	}

	else if (mySize == 1){
		temp = myFirst -> myItem;
		myFirst = myLast = NULL;
		mySize = 0;
		return temp;
	}
	else if (index >= mySize){
		Node* oPtr = myFirst;
		temp = myLast -> myItem;
		mySize = mySize - 1;
		for (int i = 0; i < mySize; i++){
			oPtr = oPtr -> myNext;
		}
		myLast = oPtr;
		delete oPtr -> myNext;
		myLast -> myNext = NULL;
		return temp;
	}
	else if(index <= 0){
		Node* oPtr = myFirst;
		temp = myFirst -> myItem;
		mySize = mySize - 1;
		myFirst = oPtr -> myNext;
		oPtr -> myNext = NULL;
		delete oPtr;
		return temp;
	}
	else {
		Node* oPtr = myFirst;
		for(int i = 1; i < index; i++) {
			oPtr = oPtr-> myNext;
		}
		temp = oPtr-> myNext-> myItem;
		mySize = mySize - 1;
		Node* tPtr = oPtr -> myNext;
		oPtr -> myNext = tPtr -> myNext;
		tPtr -> myNext = NULL;
		delete tPtr;
		return temp;
	}
}


/* Written By: hans langford
 * Purpose: check equality of lists
 */
template<class Item>
bool List<Item>::operator==(const List<Item>& original) {
        //sizes not equal so false
		if(original.mySize!=mySize){return false;}

			if(original.myFirst->myItem==myFirst->myItem){
				if(original.myLast->myItem==myLast->myItem){return true;}
			}

		return false;
}


/* Written By: hans langford
 * Purpose: read from a stream
 */
template<class Item>
void List<Item>::readFrom(istream& in) {
	this->~List();
	mySize=0;
	myFirst = myLast = NULL;
	Item a;

	for(int i=0;i<3;i++){
		in>>a;
		this->append(a);
	}
}


/* Written By: hans langford
 * Purpose: write to a file
 */
template<class Item>
void List<Item>::writeTo(string  filename, const char divider){
ofstream fout(filename.c_str());
assert(fout.is_open());
Node*temp=myFirst;
while(temp !=NULL){
	fout<<temp->myItem<<divider<<flush;
	temp=temp->myNext;
}
fout.close();
	}

/* Written By: hans langford
 * Purpose: add item to start of list
 */
template<class Item>
void List<Item>::prepend(const Item & item){
Node * nodePtr = new Node(item,NULL);

//if its empty
if(mySize==0){myFirst=nodePtr;}

//otherwise swap the next chained node with the first one
else{nodePtr->myNext=myFirst;
myFirst=nodePtr;}

mySize++;

}

/* Written By: hans langford
 * Purpose: insert item into a list
 */
template<class Item>
void List<Item>::insert(const Item& it, unsigned index) {
	if(index<=mySize && index>0){
		Node* temp = myFirst;
		Node* newNode = new Node(it, NULL);

		//this takes us to where we want to change
		for (unsigned i = 0; i < index -1; i++) {
			temp = temp->myNext;
		}
		//chain new node to the next one
		newNode->myNext = temp->myNext;
		temp->myNext = newNode;
		++mySize;
}
	else if (index <= 0) {
		this->prepend(it);
	}
	else if (index > mySize) {
		this->append(it);
	}
}


template<class Item>
bool List<Item>::insertAfter(const Item& otherPersonsName, const Item& yourName) {
	int index = getIndexOf(otherPersonsName);
	if (index < 0) {return false;}
	Node* nPtr = myFirst;
	while (nPtr) {
		if (nPtr->myItem == otherPersonsName) {
			Node* newPtr = new Node(yourName, nPtr->myNext);
			nPtr->myNext = newPtr;
			mySize++;
			return true;
		}
		nPtr = nPtr->myNext;
	}
	return false;
}



template<class Item>
bool List<Item>::insertBefore(const Item& otherPersonsName, const Item& yourName) {
	int index = getIndexOf(otherPersonsName);
	if (index < 0) {return false;}
	else {
		this -> insert(yourName, index);
		return true;
	}
}


template<class Item>
void List<Item>::Output(ostream& out) const {
	Node* nPtr = myFirst;
	if (mySize == 0) {
		out << nPtr->myItem << "\t" << flush;
	}
	else {
		while (nPtr) {
			if (nPtr == myLast) {
				out << nPtr->myItem;
			}
			else {
				out << nPtr->myItem;
			}
			nPtr = nPtr->myNext;
		}
	}
}

#endif /* LIST_H_ */
/* ListTester.h declares the test-class for class List.
 * Joel Adams, for CS 112 at Calvin College.
 */

#ifndef LISTTESTER_H_
#define LISTTESTER_H_

class ListTester {
public:
	void runTests();
	void testDefaultConstructor();
	void testNodeDefaultConstructor();
	void testNodeExplicitConstructor();
	void testAppend();
	void testDestructor();
	void testCopyConstructor();
	void testAssignment();
	void testEquality();
	void testInequality();
	void testWriteToStream() const;
	void testReadFromString() const;
	void testGetIndexOf();
	void testRemove();
	void testReadFromStream();
	void testWriteToFile();
	void testPrepend();
	void testInsert();
	void testInsertAfter();
	void testInsertBefore();
	void testOutput();


};

#endif /*LISTTESTER_H_*/
na29@gold31:/home/cs/112/current/na29/project06$ cd /Debug/
bash: cd: /Debug/: No such file or directory
na29@gold31:/home/cs/112/current/na29/project06$ cd /Debug
bash: cd: /Debug: No such file or directory
na29@gold31:/home/cs/112/current/na29/project06$ cd /Debug/[1P
na29@gold31:/home/cs/112/current/na29/project06/Debug$ ls
CongaLine.d  ListTester.d  main.d  makefile    project06   subdir.mk
CongaLine.o  ListTester.o  main.o  objects.mk  sources.mk
na29@gold31:/home/cs/112/current/na29/project06/Debug$ make all
make: Nothing to be done for 'all'.
na29@gold31:/home/cs/112/current/na29/project06/Debug$ cd ..
na29@gold31:/home/cs/112/current/na29/project06$ ./Debug/project06
Ann and Bob have started a Conga Line!

Ann=Bob=


Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 1

What is your name? Nana

Ann=Bob=Nana=


Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 2

What is your name? Bas
Who do you want to follow? Nana

Ann=Bob=Nana=Bas=


Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 3

What is your name? Cole
Who do you want to precede? Ann

Cole=Ann=Bob=Nana=Bas=


Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 4

The dance is done!
na29@gold31:/home/cs/112/current/na29/project06$ exit

Script done on Mon 29 Oct 2018 12:31:22 PM EDT
